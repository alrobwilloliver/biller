// Code generated by sqlc. DO NOT EDIT.
// source: billing_account.sql

package store

import (
	"context"
)

const createBillingAccount = `-- name: CreateBillingAccount :one
INSERT INTO "billing_account" (id)
VALUES (
    $1
)
ON CONFLICT DO NOTHING
RETURNING id, create_time, supply_enabled, demand_enabled
`

func (q *Queries) CreateBillingAccount(ctx context.Context, id string) (BillingAccount, error) {
	row := q.db.QueryRow(ctx, createBillingAccount, id)
	var i BillingAccount
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.SupplyEnabled,
		&i.DemandEnabled,
	)
	return i, err
}

const enableBillingAccountDemand = `-- name: EnableBillingAccountDemand :one
UPDATE "billing_account"
SET demand_enabled = true
WHERE id = $1
RETURNING id, create_time, supply_enabled, demand_enabled
`

func (q *Queries) EnableBillingAccountDemand(ctx context.Context, id string) (BillingAccount, error) {
	row := q.db.QueryRow(ctx, enableBillingAccountDemand, id)
	var i BillingAccount
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.SupplyEnabled,
		&i.DemandEnabled,
	)
	return i, err
}

const enableBillingAccountSupply = `-- name: EnableBillingAccountSupply :one
UPDATE "billing_account"
SET supply_enabled = true
WHERE id = $1
RETURNING id, create_time, supply_enabled, demand_enabled
`

func (q *Queries) EnableBillingAccountSupply(ctx context.Context, id string) (BillingAccount, error) {
	row := q.db.QueryRow(ctx, enableBillingAccountSupply, id)
	var i BillingAccount
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.SupplyEnabled,
		&i.DemandEnabled,
	)
	return i, err
}

const findBillingAccountById = `-- name: FindBillingAccountById :one
SELECT id, create_time, supply_enabled, demand_enabled
FROM "billing_account"
WHERE
    id = $1
`

func (q *Queries) FindBillingAccountById(ctx context.Context, id string) (BillingAccount, error) {
	row := q.db.QueryRow(ctx, findBillingAccountById, id)
	var i BillingAccount
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.SupplyEnabled,
		&i.DemandEnabled,
	)
	return i, err
}

const listAllBillingAccounts = `-- name: ListAllBillingAccounts :many
SELECT id, create_time, supply_enabled, demand_enabled
FROM "billing_account"
ORDER BY create_time
`

func (q *Queries) ListAllBillingAccounts(ctx context.Context) ([]BillingAccount, error) {
	rows, err := q.db.Query(ctx, listAllBillingAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BillingAccount
	for rows.Next() {
		var i BillingAccount
		if err := rows.Scan(
			&i.ID,
			&i.CreateTime,
			&i.SupplyEnabled,
			&i.DemandEnabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBillingAccounts = `-- name: ListBillingAccounts :many
SELECT id, create_time, supply_enabled, demand_enabled
FROM "billing_account"
WHERE id = ANY($2::varchar[])
ORDER BY create_time
LIMIT $1
`

type ListBillingAccountsParams struct {
	Limit int32
	Ids   []string
}

func (q *Queries) ListBillingAccounts(ctx context.Context, arg ListBillingAccountsParams) ([]BillingAccount, error) {
	rows, err := q.db.Query(ctx, listBillingAccounts, arg.Limit, arg.Ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BillingAccount
	for rows.Next() {
		var i BillingAccount
		if err := rows.Scan(
			&i.ID,
			&i.CreateTime,
			&i.SupplyEnabled,
			&i.DemandEnabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectBillingAccountForUpdate = `-- name: SelectBillingAccountForUpdate :one
SELECT id, create_time, supply_enabled, demand_enabled
FROM "billing_account"
WHERE id = $1
FOR UPDATE
`

func (q *Queries) SelectBillingAccountForUpdate(ctx context.Context, id string) (BillingAccount, error) {
	row := q.db.QueryRow(ctx, selectBillingAccountForUpdate, id)
	var i BillingAccount
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.SupplyEnabled,
		&i.DemandEnabled,
	)
	return i, err
}
